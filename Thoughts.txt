Evolution simulator


THE TEST: method 
	Plan
	Begränsad tid.
	Success mäts i hur långt åt höger man kommer.
	Eventuellt öka tiden efter ett antal generationer. 
	
	
	function fitness(Creature)
		[massa roliga utdata] = single_simulation(Creature,tid)
		return längd_sprungen_åt_höger
	
	functino single_simulation(Creature,tid)
		t=0
		while t < tid:
			creature.set forces 0()
			creature.update internal forces()
			for node in creature.nodes
				do physics on the nodes
				node.add_force(g*node.get_mass())
				if at ground 
					N = - take z component of node.get_force() 
					node.add_force(N)
					v = x component of node.get velocity()
					friction = node.friktionskoeff*norm(N)* v/norm(v)
					node.add_force(friction)
					
				node.update acceleration()
				node.update velocity()
				if at ground and y velocity < 0
					node.set y velocity 0()
				node.update_position()
			t += dt
		return average position of nodes, maybe some other stuff
	
	function big_simulation()
		generate a bunch of creatures
		while true
			fittness
			sort 
			kill 
			reproduce

				

THE CREATURES: Class
	En varelse består av ett antal noder och ett antal muskler.

	Pseudo kåd
	class
		fields: 
			fitness=0
			ID
			Architecture// - should probably be an adjacency matrix. perhaps with muscles instead of 1s? one can check if a graph is connected with bsf/dsf traversal of the graph
		methods:
			Constructor() 
				construct random
			Constructor(creature)
				construct baby
			Update_internal_forces(t)
				for each muscle
					muscle.add_force_to_nodes(t)
				
	class muskel
		fields: 
			ID?
			Node 1
			Node 2
			T // Total period
			f // Fraction of period contracted
			T_0 // Phase to begin in
			k // spring constant
			c // dampening constant
		methods:
			Constructor (all args)
				Alternativ - konstruera muskel som muterad kopia? constructor(muskel)
				eller båda? Nä inte båda

			Constructor()
				ger random värden till alla 

			add_force_to_nodes(t)
				ger spännkraft vid tid t och lägger till till self.node1 och self.node2
				
	
	class node
		fields:
			position
			hastighet
			acceleration
			force
			friktionskoefficient
			massa? lägga till senare, vi börjar med massa 1
			ID?
		methods:
			Constructor (all args)
				Alternativ - konstruera Node som muterad kopia? constructor(node)
				eller båda? Nä inte båda

			Constructor()
				ger random värden till alla 

			position - getter
			velocity - getter and (setter or just make y value 0)
			acceleration - behöver ingen getter
			force - getter
			add_force(force_to_be_added)
				force += force_to_be_added
			set_force_0()
				force = 0
			Update acceleration()
			Update velocity
			update position
			






THE SELECTION: Class
	Vi genererar 1000 varelser.
	alla gör testet. 
	500 blir bortsorterade.
	De 500 som är kvar får 1 barn var med små tweaks och (mer sällan) stora tweaks.


