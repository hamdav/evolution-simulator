Evolution simulator


THE TEST: method 
	Plan
	Begränsad tid.
	Success mäts i hur långt åt höger man kommer.
	Eventuellt öka tiden efter ett antal generationer. 
	
	
	function fitness(Creature)
		[massa roliga utdata] = single_simulation(Creature,tid)
		return längd_sprungen_åt_höger
	
	functino single_simulation(Creature,tid)
		t=0
		while t < tid:
			for muscles in creature.muscles
				muscle.add_acceleration_to_nodes(t)
			for node in creature.nodes
				do physics on the nodes
				node.add_acceleration(g)
				if at ground 
					vertical velocity is 0 if it was down and unchanged if it was up
					horizontal velocity and acceleration something with friction. This may be hard... not a static problem
					vertical acceleration can be left alone I think. 
				node.update_position()?
			t += dt
		return average position of nodes, maybe some other stuff
	
	function big_simulation()
		generate a bunch of creatures
		while true
			fittness
			sort 
			kill 
			reproduce

				

THE CREATURES: Class
	En varelse består av ett antal noder och ett antal muskler.

	Pseudo kåd
	class
		fields: 
			fitness=0
			ID
			Architecture
		methods:
			Constructor() 
				construct random
			Constructor(creature)
				construct baby
	class muskel
		fields: 
			ID?
			Node 1
			Node 2
			T // Total period
			f // Fraction of period contracted
			T_0 // Phase to begin in
			k // spring constant
		methods:
			Constructor (all args)
				Alternativ - konstruera muskel som muterad kopia? constructor(muskel)
				eller båda? Nä inte båda

			Constructor()
				ger random värden till alla 

			Add node accelerations(t)
				tittar på node1 och node2s positioner (och massor? kanske lägga till massa i framtida uppdatering) och beräknar spännkraft och från den tillförd acceleration på noderna och uppdaterar deras accelerationer. 
	
	class node
		fields:
			position
			hastighet
			acceleration
			friktionskoefficient
			massa? lägga till senare, vi börjar med massa 1
			ID?
		methods:
			Constructor (all args)
				Alternativ - konstruera Node som muterad kopia? constructor(node)
				eller båda? Nä inte båda

			Constructor()
				ger random värden till alla 

			ska vi ha en update_position här? Förändra acceleration och annat utifrån och sen uppdatera position och v här?
			getters och setters för vilka saker?
			position - getter






THE SELECTION: Class
	Vi genererar 1000 varelser.
	alla gör testet. 
	500 blir bortsorterade.
	De 500 som är kvar får 1 barn var med små tweaks och (mer sällan) stora tweaks.


